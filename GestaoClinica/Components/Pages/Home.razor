@page "/"
@using GestaoClinica.Services.Interfaces
@using GestaoClinica.Entities
@using MudBlazor
@inject IClienteService ClienteService
@inject IDialogService DialogService

<PageTitle>CRUD de Clientes</PageTitle>

<MudContainer Class="py-6">
    <MudPaper Elevation="4" Class="pa-6">
        <MudText Typo="Typo.h4" GutterBottom="true">Gerenciamento de Clientes</MudText>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                   OnClick="OpenCreateDialog" Class="mb-6">
            Novo Cliente
        </MudButton>

        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" Class="d-flex mx-auto my-8" />
            <MudText Class="text-center">Carregando clientes...</MudText>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Dismissible="true" @bind-Visible="errorMessageVisible">
                @errorMessage
            </MudAlert>
        }
        else if (!_clientes.Any())
        {
            <MudAlert Severity="Severity.Info">Nenhum cliente encontrado. Adicione um novo cliente.</MudAlert>
        }
        else
        {
            <MudTable Items="_clientes" Hover="true" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Nome</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Telefone</MudTh>
                    <MudTh>CPF</MudTh>
                    <MudTh>Ações</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.IdCliente</MudTd>
                    <MudTd DataLabel="Nome">@context.Nome</MudTd>
                    <MudTd DataLabel="Email">@context.Email</MudTd>
                    <MudTd DataLabel="Telefone">@context.Telefone</MudTd>
                    <MudTd DataLabel="CPF">@context.CPF</MudTd>
                    <MudTd DataLabel="Ações">
                        <MudButton Size="Size.Small" Color="Color.Info" Variant="Variant.Text"
                                   StartIcon="@Icons.Material.Filled.Edit"
                                   OnClick="() => OpenEditDialog(context)">Editar</MudButton>
                        <MudButton Size="Size.Small" Color="Color.Error" Variant="Variant.Text"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   OnClick="() => DeleteCliente(context.IdCliente)">Excluir</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>

            <MudText Class="mt-4 text-right">Total: @_clientes.Count cliente(s)</MudText>
        }
    </MudPaper>
</MudContainer>

<!-- Diálogo de Cadastro/Edição -->
@if (dialogVisible)
{
    <MudDialog Title="@dialogTitle" OnClosed="CloseDialog">
        <DialogContent>
            <MudTextField Label="Nome" @bind-Value="clienteEdit.Nome" Variant="Variant.Outlined"
                          Required="true" ErrorText="Nome é obrigatório" Class="mb-4" />

            <MudTextField Label="Email" @bind-Value="clienteEdit.Email" Variant="Variant.Outlined"
                          InputType="InputType.Email" Class="mb-4" />

            <MudTextField Label="Telefone" @bind-Value="clienteEdit.Telefone" Variant="Variant.Outlined"
                          Class="mb-4" />

            <MudTextField Label="CPF" @bind-Value="clienteEdit.CPF" Variant="Variant.Outlined"
                          Class="mb-4" />

            <MudTextField Label="Observações" @bind-Value="clienteEdit.Observacoes" Variant="Variant.Outlined"
                          Multiline="true" Rows="3" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="CloseDialog">Cancelar</MudButton>
            <MudButton OnClick="SaveCliente" Color="Color.Primary" Disabled="saving">
                @(saving ? "Salvando..." : "Salvar")
            </MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    private List<Cliente> _clientes = new();
    private bool isLoading = false;
    private string errorMessage = "";
    private bool errorMessageVisible = true;

    private bool dialogVisible = false;
    private string dialogTitle = "";
    private Cliente clienteEdit = new();
    private bool saving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadClientes();
    }

    private async Task LoadClientes()
    {
        isLoading = true;
        errorMessage = "";
        try
        {
            var result = await ClienteService.ListarClienteAsync();
            _clientes = result.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar clientes: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OpenCreateDialog()
    {
        clienteEdit = new Cliente();
        dialogTitle = "Adicionar Novo Cliente";
        dialogVisible = true;
    }

    private void OpenEditDialog(Cliente cliente)
    {
        clienteEdit = new Cliente
        {
            IdCliente = cliente.IdCliente,
            Nome = cliente.Nome,
            Email = cliente.Email,
            Telefone = cliente.Telefone,
            CPF = cliente.CPF,
            Observacoes = cliente.Observacoes,
            Ativo = cliente.Ativo,
            DataCriacao = cliente.DataCriacao,
            UltimaAtualizacao = cliente.UltimaAtualizacao
        };
        dialogTitle = "Editar Cliente";
        dialogVisible = true;
    }

    private async Task SaveCliente()
    {
        if (string.IsNullOrWhiteSpace(clienteEdit.Nome))
        {
            errorMessage = "Nome é obrigatório.";
            return;
        }

        saving = true;
        try
        {
            if (clienteEdit.IdCliente == 0)
            {
                await ClienteService.AdicionarAsync(clienteEdit);
            }
            else
            {
                await ClienteService.AtualizarAsync(clienteEdit);
            }

            await LoadClientes();
            CloseDialog();
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao salvar: {ex.Message}";
        }
        finally
        {
            saving = false;
        }
    }

    private async Task DeleteCliente(int id)
    {
        var result = await DialogService.ShowMessageBox(
            "Confirmar Exclusão",
            "Tem certeza que deseja excluir este cliente? Esta ação não pode ser desfeita.",
            yesText: "Sim", noText: "Não");

        if (result == true)
        {
            try
            {
                await ClienteService.ExcluirAsync(id);
                await LoadClientes();
            }
            catch (Exception ex)
            {
                errorMessage = $"Erro ao excluir: {ex.Message}";
            }
        }
    }

    private void CloseDialog()
    {
        dialogVisible = false;
        clienteEdit = new Cliente();
    }
}